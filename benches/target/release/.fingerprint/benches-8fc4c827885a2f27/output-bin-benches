{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":476,"byte_end":483,"line_start":16,"line_end":16,"column_start":55,"column_end":62,"is_primary":true,"text":[{"text":"                    .get_logs(20_000_000, 20_001_000, address, None)","highlight_start":55,"highlight_end":62}],"label":"expected `alloy_primitives::bits::address::Address`, found `alloy::alloy_primitives::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":443,"byte_end":451,"line_start":16,"line_end":16,"column_start":22,"column_end":30,"is_primary":false,"text":[{"text":"                    .get_logs(20_000_000, 20_001_000, address, None)","highlight_start":22,"highlight_end":30}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"two different versions of crate `alloy_primitives` are being used; two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/macros.rs","byte_start":2469,"byte_end":2553,"line_start":73,"line_end":73,"column_start":9,"column_end":93,"is_primary":true,"text":[{"text":"        $vis struct $name(#[into_iterator(owned, ref, ref_mut)] pub $crate::FixedBytes<$n>);","highlight_start":9,"highlight_end":93}],"label":"this is the expected type `alloy_primitives::bits::address::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/address.rs","byte_start":1090,"byte_end":2806,"line_start":45,"line_end":87,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"wrap_fixed_bytes!(","highlight_start":1,"highlight_end":1},{"text":"    // we implement Display with the checksum, so we don't derive it","highlight_start":1,"highlight_end":1},{"text":"    extra_derives: [],","highlight_start":1,"highlight_end":1},{"text":"    /// An Ethereum address, 20 bytes in length.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// This type is separate from [`B160`](crate::B160) / [`FixedBytes<20>`]","highlight_start":1,"highlight_end":1},{"text":"    /// and is declared with the [`wrap_fixed_bytes!`] macro. This allows us","highlight_start":1,"highlight_end":1},{"text":"    /// to implement address-specific functionality.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// The main difference with the generic [`FixedBytes`] implementation is that","highlight_start":1,"highlight_end":1},{"text":"    /// [`Display`] formats the address using its [EIP-55] checksum","highlight_start":1,"highlight_end":1},{"text":"    /// ([`to_checksum`]).","highlight_start":1,"highlight_end":1},{"text":"    /// Use [`Debug`] to display the raw bytes without the checksum.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// [EIP-55]: https://eips.ethereum.org/EIPS/eip-55","highlight_start":1,"highlight_end":1},{"text":"    /// [`Debug`]: fmt::Debug","highlight_start":1,"highlight_end":1},{"text":"    /// [`Display`]: fmt::Display","highlight_start":1,"highlight_end":1},{"text":"    /// [`to_checksum`]: Address::to_checksum","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// # Examples","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// Parsing and formatting:","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// ```","highlight_start":1,"highlight_end":1},{"text":"    /// use alloy_primitives::{address, Address};","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// let checksummed = \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\";","highlight_start":1,"highlight_end":1},{"text":"    /// let expected = address!(\"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":1},{"text":"    /// let address = Address::parse_checksummed(checksummed, None).expect(\"valid checksum\");","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(address, expected);","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// // Format the address with the checksum","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(address.to_string(), checksummed);","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(address.to_checksum(None), checksummed);","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// // Format the compressed checksummed address","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(format!(\"{address:#}\"), \"0xd8dAâ€¦6045\");","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// // Format the address without the checksum","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(format!(\"{address:?}\"), \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":1},{"text":"    /// ```","highlight_start":1,"highlight_end":1},{"text":"    pub struct Address<20>;","highlight_start":1,"highlight_end":1},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_fixed_bytes!","def_site_span":{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/macros.rs","byte_start":735,"byte_end":764,"line_start":22,"line_end":22,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! wrap_fixed_bytes {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.1.2/src/bits/macros.rs","byte_start":2469,"byte_end":2553,"line_start":73,"line_end":73,"column_start":9,"column_end":93,"is_primary":true,"text":[{"text":"        $vis struct $name(#[into_iterator(owned, ref, ref_mut)] pub $crate::FixedBytes<$n>);","highlight_start":9,"highlight_end":93}],"label":"this is the found type `alloy::alloy_primitives::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.1.2/src/bits/address.rs","byte_start":1090,"byte_end":2806,"line_start":45,"line_end":87,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"wrap_fixed_bytes!(","highlight_start":1,"highlight_end":1},{"text":"    // we implement Display with the checksum, so we don't derive it","highlight_start":1,"highlight_end":1},{"text":"    extra_derives: [],","highlight_start":1,"highlight_end":1},{"text":"    /// An Ethereum address, 20 bytes in length.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// This type is separate from [`B160`](crate::B160) / [`FixedBytes<20>`]","highlight_start":1,"highlight_end":1},{"text":"    /// and is declared with the [`wrap_fixed_bytes!`] macro. This allows us","highlight_start":1,"highlight_end":1},{"text":"    /// to implement address-specific functionality.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// The main difference with the generic [`FixedBytes`] implementation is that","highlight_start":1,"highlight_end":1},{"text":"    /// [`Display`] formats the address using its [EIP-55] checksum","highlight_start":1,"highlight_end":1},{"text":"    /// ([`to_checksum`]).","highlight_start":1,"highlight_end":1},{"text":"    /// Use [`Debug`] to display the raw bytes without the checksum.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// [EIP-55]: https://eips.ethereum.org/EIPS/eip-55","highlight_start":1,"highlight_end":1},{"text":"    /// [`Debug`]: fmt::Debug","highlight_start":1,"highlight_end":1},{"text":"    /// [`Display`]: fmt::Display","highlight_start":1,"highlight_end":1},{"text":"    /// [`to_checksum`]: Address::to_checksum","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// # Examples","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// Parsing and formatting:","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// ```","highlight_start":1,"highlight_end":1},{"text":"    /// use alloy_primitives::{address, Address};","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// let checksummed = \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\";","highlight_start":1,"highlight_end":1},{"text":"    /// let expected = address!(\"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":1},{"text":"    /// let address = Address::parse_checksummed(checksummed, None).expect(\"valid checksum\");","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(address, expected);","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// // Format the address with the checksum","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(address.to_string(), checksummed);","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(address.to_checksum(None), checksummed);","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// // Format the compressed checksummed address","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(format!(\"{address:#}\"), \"0xd8dAâ€¦6045\");","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// // Format the address without the checksum","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(format!(\"{address:?}\"), \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":1},{"text":"    /// ```","highlight_start":1,"highlight_end":1},{"text":"    pub struct Address<20>;","highlight_start":1,"highlight_end":1},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_fixed_bytes!","def_site_span":{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.1.2/src/bits/macros.rs","byte_start":735,"byte_end":764,"line_start":22,"line_end":22,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! wrap_fixed_bytes {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":38,"byte_end":47,"line_start":2,"line_end":2,"column_start":7,"column_end":16,"is_primary":false,"text":[{"text":"use ::palantiri::{rpc::RpcClient, transport::http::TransportBuilder};","highlight_start":7,"highlight_end":16}],"label":"one version of crate `alloy_primitives` used here, as a dependency of crate `alloy_core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":4,"byte_end":9,"line_start":1,"line_end":1,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"use alloy::primitives::address;","highlight_start":5,"highlight_end":10}],"label":"one version of crate `alloy_primitives` used here, as a dependency of crate `alloy_core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/palantiri-0.1.0/src/rpc.rs","byte_start":5180,"byte_end":5188,"line_start":187,"line_end":187,"column_start":18,"column_end":26,"is_primary":true,"text":[{"text":"    pub async fn get_logs(","highlight_start":18,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:16:55\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    .get_logs(20_000_000, 20_001_000, address, None)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `alloy_primitives::bits::address::Address`, found `alloy::alloy_primitives::Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: two different versions of crate `alloy_primitives` are being used; two types coming from two different versions of the same crate are different types even if they look the same\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.1.2/src/bits/address.rs:45:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mwrap_fixed_bytes!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // we implement Display with the checksum, so we don't derive it\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    extra_derives: [],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// An Ethereum address, 20 bytes in length.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct Address<20>;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the found type `alloy::alloy_primitives::Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/address.rs:87:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the expected type `alloy_primitives::bits::address::Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/main.rs:1:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse alloy::primitives::address;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `alloy_primitives` used here, as a dependency of crate `alloy_core`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse ::palantiri::{rpc::RpcClient, transport::http::TransportBuilder};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `alloy_primitives` used here, as a dependency of crate `alloy_core`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `cargo tree` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/palantiri-0.1.0/src/rpc.rs:187:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn get_logs(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `wrap_fixed_bytes` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 1 previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 1 previous error\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0308`.\u001b[0m\n"}
