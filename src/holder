use std::sync::Arc;
use std::time::Duration;

use async_trait::async_trait;
use hyper::header::HeaderValue;
use hyper::service::Service;
use hyper_tls::HttpsConnector;
use hyper_util::client::legacy::{Builder, Client};
use hyper_util::rt::TokioExecutor;

use crate::hyper_rpc::Transport;
use crate::RpcError;

#[derive(Debug)]
pub struct HyperTransport {
    client: Client<HttpsConnector<hyper::client::HttpConnector>>,
    url: String,
}

const DURATION_60: Duration = std::time::Duration::from_secs(60);
const KEEP_ALIVE_TIMEOUT: Duration = Duration::from_secs(90);
const POOL_IDLE_TIMEOUT: Duration = Duration::from_secs(60);
const CONTENT_TYPE_JSON: HeaderValue = HeaderValue::from_static("application/json");

impl HyperTransport {
    pub fn new(url: String) -> Self {
        let mut http_connector = TokioExecutor::new();

        // http_connector.set_keepalive(Some(KEEP_ALIVE_TIMEOUT));
        // http_connector.set_nodelay(true);
        // http_connector.enforce_http(false);
        // http_connector.set_reuse_address(true);

        // let https = HttpsConnector::new_with_connector(http_connector);

        // // Build the hyper client
        // let client = Client::builder()
        // .pool_idle_timeout(DURATION_60)
        // .http1_max_buf_size(64 * 1024)
        // .pool_max_idle_per_host(64)
        // .set_host(true)

        // .build::<_, Body>(https);

 

        Self { client, url }
    }
}

#[async_trait]
impl Transport for HyperTransport {
    async fn hyper_execute(&self, request: String) -> Result<String, RpcError> {
        let req = Request::builder()
            .method(Method::POST)
            .uri(self.url.as_str())
            .header("Content-Type", CONTENT_TYPE_JSON)
            .body(hyper::Body::from(request))
            .map_err(|e| RpcError::Transport(format!("Failed to build request: {}", e)))?;

        let response = self
            .client
            .request(req)
            .await
            .map_err(|e| RpcError::Transport(format!("Request failed: {}", e)))?;

        let body_bytes = hyper::body::to_bytes(response.into_body())
            .await
            .map_err(|e| RpcError::Transport(format!("Failed to read response body: {}", e)))?;

        String::from_utf8(body_bytes.to_vec())
            .map_err(|e| RpcError::Response(format!("Invalid UTF-8 in response: {}", e)))
    }

    async fn hyper_execute_raw(&self, request: String) -> Result<Vec<u8>, RpcError> {
        let req = Request::builder()
            .method(Method::POST)
            .uri(self.url.as_str())
            .header("Content-Type", CONTENT_TYPE_JSON)
            .body(hyper::Body::from(request))
            .map_err(|e| RpcError::Transport(format!("Failed to build request: {}", e)))?;

        let response = self
            .client
            .request(req)
            .await
            .map_err(|e| RpcError::Transport(format!("Request failed: {}", e)))?;

        let body_bytes = hyper::body::to_bytes(response.into_body())
            .await
            .map_err(|e| RpcError::Transport(format!("Failed to read response body: {}", e)))?;

        Ok(body_bytes.to_vec())
    }
}
