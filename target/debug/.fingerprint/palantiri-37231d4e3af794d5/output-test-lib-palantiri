{"$message_type":"diagnostic","message":"unresolved imports `crate::parser::hex_to_b256`, `crate::parser::hex_to_u256`, `crate::parser::hex_to_u64`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/rpc.rs","byte_start":666,"byte_end":677,"line_start":20,"line_end":20,"column_start":6,"column_end":17,"is_primary":true,"text":[{"text":"    {hex_to_b256, hex_to_u256, hex_to_u64},","highlight_start":6,"highlight_end":17}],"label":"no `hex_to_b256` in `parser`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/rpc.rs","byte_start":679,"byte_end":690,"line_start":20,"line_end":20,"column_start":19,"column_end":30,"is_primary":true,"text":[{"text":"    {hex_to_b256, hex_to_u256, hex_to_u64},","highlight_start":19,"highlight_end":30}],"label":"no `hex_to_u256` in `parser`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/rpc.rs","byte_start":692,"byte_end":702,"line_start":20,"line_end":20,"column_start":32,"column_end":42,"is_primary":true,"text":[{"text":"    {hex_to_b256, hex_to_u256, hex_to_u64},","highlight_start":32,"highlight_end":42}],"label":"no `hex_to_u64` in `parser`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `crate::parser::hex_to_b256`, `crate::parser::hex_to_u256`, `crate::parser::hex_to_u64`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rpc.rs:20:6\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    {hex_to_b256, hex_to_u256, hex_to_u64},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `hex_to_u64` in `parser`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `hex_to_u256` in `parser`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `hex_to_b256` in `parser`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved imports `super::find_field`, `super::hex_to_address`, `super::hex_to_b256`, `super::hex_to_u256`, `super::hex_to_u64`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/parser/block_parser.rs","byte_start":12,"byte_end":22,"line_start":1,"line_end":1,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"use super::{find_field, hex_to_address, hex_to_b256, hex_to_u256, hex_to_u64};","highlight_start":13,"highlight_end":23}],"label":"no `find_field` in `parser`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/parser/block_parser.rs","byte_start":24,"byte_end":38,"line_start":1,"line_end":1,"column_start":25,"column_end":39,"is_primary":true,"text":[{"text":"use super::{find_field, hex_to_address, hex_to_b256, hex_to_u256, hex_to_u64};","highlight_start":25,"highlight_end":39}],"label":"no `hex_to_address` in `parser`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/parser/block_parser.rs","byte_start":40,"byte_end":51,"line_start":1,"line_end":1,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"use super::{find_field, hex_to_address, hex_to_b256, hex_to_u256, hex_to_u64};","highlight_start":41,"highlight_end":52}],"label":"no `hex_to_b256` in `parser`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/parser/block_parser.rs","byte_start":53,"byte_end":64,"line_start":1,"line_end":1,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"use super::{find_field, hex_to_address, hex_to_b256, hex_to_u256, hex_to_u64};","highlight_start":54,"highlight_end":65}],"label":"no `hex_to_u256` in `parser`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/parser/block_parser.rs","byte_start":66,"byte_end":76,"line_start":1,"line_end":1,"column_start":67,"column_end":77,"is_primary":true,"text":[{"text":"use super::{find_field, hex_to_address, hex_to_b256, hex_to_u256, hex_to_u64};","highlight_start":67,"highlight_end":77}],"label":"no `hex_to_u64` in `parser`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"unresolved item `crate::rpc::tests::hex_to_b256` exists but is inaccessible","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"unresolved item `crate::rpc::tests::hex_to_u256` exists but is inaccessible","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"unresolved item `crate::rpc::tests::hex_to_u64` exists but is inaccessible","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `super::find_field`, `super::hex_to_address`, `super::hex_to_b256`, `super::hex_to_u256`, `super::hex_to_u64`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser/block_parser.rs:1:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse super::{find_field, hex_to_address, hex_to_b256, hex_to_u256, hex_to_u64};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `hex_to_u64` in `parser`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `hex_to_u256` in `parser`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `hex_to_b256` in `parser`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `hex_to_address` in `parser`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `find_field` in `parser`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: unresolved item `crate::rpc::tests::hex_to_b256` exists but is inaccessible\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: unresolved item `crate::rpc::tests::hex_to_u256` exists but is inaccessible\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: unresolved item `crate::rpc::tests::hex_to_u64` exists but is inaccessible\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `super::find_field`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/parser/parser_for_small_response.rs","byte_start":4,"byte_end":21,"line_start":1,"line_end":1,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"use super::find_field;","highlight_start":5,"highlight_end":22}],"label":"no `find_field` in `parser`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `super::find_field`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser/parser_for_small_response.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse super::find_field;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `find_field` in `parser`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved imports `super::find_field`, `super::hex_to_address`, `super::hex_to_b256`, `super::hex_to_u256`, `super::hex_to_u64`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/parser/tx_parser.rs","byte_start":148,"byte_end":158,"line_start":7,"line_end":7,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"use super::{find_field, hex_to_address, hex_to_b256, hex_to_u256, hex_to_u64};","highlight_start":13,"highlight_end":23}],"label":"no `find_field` in `parser`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/parser/tx_parser.rs","byte_start":160,"byte_end":174,"line_start":7,"line_end":7,"column_start":25,"column_end":39,"is_primary":true,"text":[{"text":"use super::{find_field, hex_to_address, hex_to_b256, hex_to_u256, hex_to_u64};","highlight_start":25,"highlight_end":39}],"label":"no `hex_to_address` in `parser`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/parser/tx_parser.rs","byte_start":176,"byte_end":187,"line_start":7,"line_end":7,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"use super::{find_field, hex_to_address, hex_to_b256, hex_to_u256, hex_to_u64};","highlight_start":41,"highlight_end":52}],"label":"no `hex_to_b256` in `parser`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/parser/tx_parser.rs","byte_start":189,"byte_end":200,"line_start":7,"line_end":7,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"use super::{find_field, hex_to_address, hex_to_b256, hex_to_u256, hex_to_u64};","highlight_start":54,"highlight_end":65}],"label":"no `hex_to_u256` in `parser`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/parser/tx_parser.rs","byte_start":202,"byte_end":212,"line_start":7,"line_end":7,"column_start":67,"column_end":77,"is_primary":true,"text":[{"text":"use super::{find_field, hex_to_address, hex_to_b256, hex_to_u256, hex_to_u64};","highlight_start":67,"highlight_end":77}],"label":"no `hex_to_u64` in `parser`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"unresolved item `crate::rpc::tests::hex_to_b256` exists but is inaccessible","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"unresolved item `crate::rpc::tests::hex_to_u256` exists but is inaccessible","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"unresolved item `crate::rpc::tests::hex_to_u64` exists but is inaccessible","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `super::find_field`, `super::hex_to_address`, `super::hex_to_b256`, `super::hex_to_u256`, `super::hex_to_u64`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser/tx_parser.rs:7:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse super::{find_field, hex_to_address, hex_to_b256, hex_to_u256, hex_to_u64};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `hex_to_u64` in `parser`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `hex_to_u256` in `parser`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `hex_to_b256` in `parser`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `hex_to_address` in `parser`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `find_field` in `parser`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: unresolved item `crate::rpc::tests::hex_to_b256` exists but is inaccessible\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: unresolved item `crate::rpc::tests::hex_to_u256` exists but is inaccessible\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: unresolved item `crate::rpc::tests::hex_to_u64` exists but is inaccessible\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `serde_json`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/rpc.rs","byte_start":262,"byte_end":272,"line_start":8,"line_end":8,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"use serde_json::{json, Value};","highlight_start":5,"highlight_end":15}],"label":"use of unresolved module or unlinked crate `serde_json`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you wanted to use a crate named `serde_json`, use `cargo add serde_json` to add it to your `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `serde_json`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rpc.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde_json::{json, Value};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of unresolved module or unlinked crate `serde_json`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you wanted to use a crate named `serde_json`, use `cargo add serde_json` to add it to your `Cargo.toml`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `crate::types`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/parser/block_parser.rs","byte_start":90,"byte_end":95,"line_start":2,"line_end":2,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"use crate::types::Block;","highlight_start":12,"highlight_end":17}],"label":"unresolved import","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a similar path exists","code":null,"level":"help","spans":[{"file_name":"src/parser/block_parser.rs","byte_start":90,"byte_end":95,"line_start":2,"line_end":2,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"use crate::types::Block;","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":"alloy::rpc::types","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `crate::types`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser/block_parser.rs:2:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::types::Block;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munresolved import\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a similar path exists: `alloy::rpc::types`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `crate::types`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/parser/tx_parser.rs","byte_start":78,"byte_end":83,"line_start":4,"line_end":4,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"use crate::types::RawJsonResponse;","highlight_start":12,"highlight_end":17}],"label":"unresolved import","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a similar path exists","code":null,"level":"help","spans":[{"file_name":"src/parser/tx_parser.rs","byte_start":78,"byte_end":83,"line_start":4,"line_end":4,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"use crate::types::RawJsonResponse;","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":"alloy::rpc::types","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `crate::types`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser/tx_parser.rs:4:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::types::RawJsonResponse;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munresolved import\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a similar path exists: `alloy::rpc::types`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `crate::types`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/parser/tx_parser.rs","byte_start":113,"byte_end":118,"line_start":5,"line_end":5,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"use crate::types::TransactionTx;","highlight_start":12,"highlight_end":17}],"label":"unresolved import","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a similar path exists","code":null,"level":"help","spans":[{"file_name":"src/parser/tx_parser.rs","byte_start":113,"byte_end":118,"line_start":5,"line_end":5,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"use crate::types::TransactionTx;","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":"alloy::rpc::types","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `crate::types`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser/tx_parser.rs:5:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::types::TransactionTx;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munresolved import\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a similar path exists: `alloy::rpc::types`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `tree_hash_derive`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/parser/types.rs","byte_start":149,"byte_end":165,"line_start":7,"line_end":7,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use tree_hash_derive::TreeHash;","highlight_start":5,"highlight_end":21}],"label":"use of unresolved module or unlinked crate `tree_hash_derive`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you wanted to use a crate named `tree_hash_derive`, use `cargo add tree_hash_derive` to add it to your `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `tree_hash_derive`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser/types.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse tree_hash_derive::TreeHash;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of unresolved module or unlinked crate `tree_hash_derive`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you wanted to use a crate named `tree_hash_derive`, use `cargo add tree_hash_derive` to add it to your `Cargo.toml`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of unresolved module or unlinked crate `serde_json`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/rpc.rs","byte_start":5511,"byte_end":5521,"line_start":196,"line_end":196,"column_start":27,"column_end":37,"is_primary":true,"text":[{"text":"            let mut obj = serde_json::Map::with_capacity(4);","highlight_start":27,"highlight_end":37}],"label":"use of unresolved module or unlinked crate `serde_json`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you wanted to use a crate named `serde_json`, use `cargo add serde_json` to add it to your `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider importing one of these structs","code":null,"level":"help","spans":[{"file_name":"src/rpc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use alloy::hex;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use std::iter::Map;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/rpc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use alloy::hex;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use futures::future::Map;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/rpc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use alloy::hex;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use futures::stream::Map;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you import `Map`, refer to it directly","code":null,"level":"help","spans":[{"file_name":"src/rpc.rs","byte_start":5511,"byte_end":5523,"line_start":196,"line_end":196,"column_start":27,"column_end":39,"is_primary":true,"text":[{"text":"            let mut obj = serde_json::Map::with_capacity(4);","highlight_start":27,"highlight_end":39}],"label":null,"suggested_replacement":"","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of unresolved module or unlinked crate `serde_json`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rpc.rs:196:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m196\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut obj = serde_json::Map::with_capacity(4);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of unresolved module or unlinked crate `serde_json`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you wanted to use a crate named `serde_json`, use `cargo add serde_json` to add it to your `Cargo.toml`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these structs\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use std::iter::Map;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use futures::future::Map;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use futures::stream::Map;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you import `Map`, refer to it directly\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m196\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            let mut obj = \u001b[0m\u001b[0m\u001b[38;5;9mserde_json::\u001b[0m\u001b[0mMap::with_capacity(4);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m196\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            let mut obj = Map::with_capacity(4);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `alloy::hex`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/rpc.rs","byte_start":4,"byte_end":14,"line_start":1,"line_end":1,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"use alloy::hex;","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/rpc.rs","byte_start":0,"byte_end":16,"line_start":1,"line_end":2,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use alloy::hex;","highlight_start":1,"highlight_end":16},{"text":"use alloy::primitives::{Address, BlockNumber, Bytes, FixedBytes, B256, U256, U64};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `alloy::hex`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rpc.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse alloy::hex;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Duration`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/rpc.rs","byte_start":20439,"byte_end":20447,"line_start":671,"line_end":671,"column_start":21,"column_end":29,"is_primary":true,"text":[{"text":"    use std::time::{Duration, Instant};","highlight_start":21,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/rpc.rs","byte_start":20439,"byte_end":20449,"line_start":671,"line_end":671,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"    use std::time::{Duration, Instant};","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/rpc.rs","byte_start":20438,"byte_end":20439,"line_start":671,"line_end":671,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"    use std::time::{Duration, Instant};","highlight_start":20,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/rpc.rs","byte_start":20456,"byte_end":20457,"line_start":671,"line_end":671,"column_start":38,"column_end":39,"is_primary":true,"text":[{"text":"    use std::time::{Duration, Instant};","highlight_start":38,"highlight_end":39}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Duration`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rpc.rs:671:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m671\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use std::time::{Duration, Instant};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of unresolved module or unlinked crate `serde_json`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/rpc.rs","byte_start":9390,"byte_end":9400,"line_start":323,"line_end":323,"column_start":34,"column_end":44,"is_primary":true,"text":[{"text":"        let block: BlockHeader = serde_json::from_value(response[\"result\"].clone())","highlight_start":34,"highlight_end":44}],"label":"use of unresolved module or unlinked crate `serde_json`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you wanted to use a crate named `serde_json`, use `cargo add serde_json` to add it to your `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of unresolved module or unlinked crate `serde_json`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rpc.rs:323:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m323\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let block: BlockHeader = serde_json::from_value(response[\"result\"].clone())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of unresolved module or unlinked crate `serde_json`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you wanted to use a crate named `serde_json`, use `cargo add serde_json` to add it to your `Cargo.toml`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of unresolved module or unlinked crate `serde_json`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/rpc.rs","byte_start":10239,"byte_end":10249,"line_start":350,"line_end":350,"column_start":34,"column_end":44,"is_primary":true,"text":[{"text":"        let block: BlockHeader = serde_json::from_value(response[\"result\"].clone())","highlight_start":34,"highlight_end":44}],"label":"use of unresolved module or unlinked crate `serde_json`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you wanted to use a crate named `serde_json`, use `cargo add serde_json` to add it to your `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of unresolved module or unlinked crate `serde_json`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rpc.rs:350:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m350\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let block: BlockHeader = serde_json::from_value(response[\"result\"].clone())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of unresolved module or unlinked crate `serde_json`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you wanted to use a crate named `serde_json`, use `cargo add serde_json` to add it to your `Cargo.toml`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of unresolved module or unlinked crate `serde_json`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/rpc.rs","byte_start":10892,"byte_end":10902,"line_start":371,"line_end":371,"column_start":34,"column_end":44,"is_primary":true,"text":[{"text":"        let block: BlockHeader = serde_json::from_value(response[\"result\"].clone())","highlight_start":34,"highlight_end":44}],"label":"use of unresolved module or unlinked crate `serde_json`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you wanted to use a crate named `serde_json`, use `cargo add serde_json` to add it to your `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of unresolved module or unlinked crate `serde_json`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rpc.rs:371:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m371\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let block: BlockHeader = serde_json::from_value(response[\"result\"].clone())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of unresolved module or unlinked crate `serde_json`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you wanted to use a crate named `serde_json`, use `cargo add serde_json` to add it to your `Cargo.toml`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of unresolved module or unlinked crate `serde_json`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/rpc.rs","byte_start":19832,"byte_end":19842,"line_start":649,"line_end":649,"column_start":26,"column_end":36,"is_primary":true,"text":[{"text":"            .execute_raw(serde_json::to_string(&request).expect(\"convert to string\"))","highlight_start":26,"highlight_end":36}],"label":"use of unresolved module or unlinked crate `serde_json`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you wanted to use a crate named `serde_json`, use `cargo add serde_json` to add it to your `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of unresolved module or unlinked crate `serde_json`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rpc.rs:649:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m649\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .execute_raw(serde_json::to_string(&request).expect(\"convert to string\"))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of unresolved module or unlinked crate `serde_json`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you wanted to use a crate named `serde_json`, use `cargo add serde_json` to add it to your `Cargo.toml`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of unresolved module or unlinked crate `serde_json`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/rpc.rs","byte_start":20114,"byte_end":20124,"line_start":658,"line_end":658,"column_start":22,"column_end":32,"is_primary":true,"text":[{"text":"            .execute(serde_json::to_string(&request).expect(\"convert to string\"))","highlight_start":22,"highlight_end":32}],"label":"use of unresolved module or unlinked crate `serde_json`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you wanted to use a crate named `serde_json`, use `cargo add serde_json` to add it to your `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of unresolved module or unlinked crate `serde_json`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rpc.rs:658:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m658\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .execute(serde_json::to_string(&request).expect(\"convert to string\"))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of unresolved module or unlinked crate `serde_json`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you wanted to use a crate named `serde_json`, use `cargo add serde_json` to add it to your `Cargo.toml`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of unresolved module or unlinked crate `serde_json`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/rpc.rs","byte_start":20205,"byte_end":20215,"line_start":661,"line_end":661,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"        serde_json::from_str(&response).map_err(|e| RpcError::Parse(e.to_string()))","highlight_start":9,"highlight_end":19}],"label":"use of unresolved module or unlinked crate `serde_json`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you wanted to use a crate named `serde_json`, use `cargo add serde_json` to add it to your `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of unresolved module or unlinked crate `serde_json`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rpc.rs:661:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m661\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        serde_json::from_str(&response).map_err(|e| RpcError::Parse(e.to_string()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of unresolved module or unlinked crate `serde_json`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you wanted to use a crate named `serde_json`, use `cargo add serde_json` to add it to your `Cargo.toml`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/rpc.rs","byte_start":20845,"byte_end":20897,"line_start":685,"line_end":685,"column_start":24,"column_end":76,"is_primary":true,"text":[{"text":"            from: Some(address!(\"8f54C8c2df62c94772ac14CcFc85603742976312\")),","highlight_start":24,"highlight_end":76}],"label":"expected `alloy::alloy_primitives::Address`, found `alloy_primitives::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/rpc.rs","byte_start":20840,"byte_end":20844,"line_start":685,"line_end":685,"column_start":19,"column_end":23,"is_primary":false,"text":[{"text":"            from: Some(address!(\"8f54C8c2df62c94772ac14CcFc85603742976312\")),","highlight_start":19,"highlight_end":23}],"label":"arguments to this enum variant are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"two different versions of crate `alloy_primitives` are being used; two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/macros.rs","byte_start":2469,"byte_end":2553,"line_start":73,"line_end":73,"column_start":9,"column_end":93,"is_primary":true,"text":[{"text":"        $vis struct $name(#[into_iterator(owned, ref, ref_mut)] pub $crate::FixedBytes<$n>);","highlight_start":9,"highlight_end":93}],"label":"this is the expected type `alloy::alloy_primitives::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/address.rs","byte_start":1090,"byte_end":2806,"line_start":45,"line_end":87,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"wrap_fixed_bytes!(","highlight_start":1,"highlight_end":1},{"text":"    // we implement Display with the checksum, so we don't derive it","highlight_start":1,"highlight_end":1},{"text":"    extra_derives: [],","highlight_start":1,"highlight_end":1},{"text":"    /// An Ethereum address, 20 bytes in length.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// This type is separate from [`B160`](crate::B160) / [`FixedBytes<20>`]","highlight_start":1,"highlight_end":1},{"text":"    /// and is declared with the [`wrap_fixed_bytes!`] macro. This allows us","highlight_start":1,"highlight_end":1},{"text":"    /// to implement address-specific functionality.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// The main difference with the generic [`FixedBytes`] implementation is that","highlight_start":1,"highlight_end":1},{"text":"    /// [`Display`] formats the address using its [EIP-55] checksum","highlight_start":1,"highlight_end":1},{"text":"    /// ([`to_checksum`]).","highlight_start":1,"highlight_end":1},{"text":"    /// Use [`Debug`] to display the raw bytes without the checksum.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// [EIP-55]: https://eips.ethereum.org/EIPS/eip-55","highlight_start":1,"highlight_end":1},{"text":"    /// [`Debug`]: fmt::Debug","highlight_start":1,"highlight_end":1},{"text":"    /// [`Display`]: fmt::Display","highlight_start":1,"highlight_end":1},{"text":"    /// [`to_checksum`]: Address::to_checksum","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// # Examples","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// Parsing and formatting:","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// ```","highlight_start":1,"highlight_end":1},{"text":"    /// use alloy_primitives::{address, Address};","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// let checksummed = \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\";","highlight_start":1,"highlight_end":1},{"text":"    /// let expected = address!(\"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":1},{"text":"    /// let address = Address::parse_checksummed(checksummed, None).expect(\"valid checksum\");","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(address, expected);","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// // Format the address with the checksum","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(address.to_string(), checksummed);","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(address.to_checksum(None), checksummed);","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// // Format the compressed checksummed address","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(format!(\"{address:#}\"), \"0xd8dA…6045\");","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// // Format the address without the checksum","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(format!(\"{address:?}\"), \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":1},{"text":"    /// ```","highlight_start":1,"highlight_end":1},{"text":"    pub struct Address<20>;","highlight_start":1,"highlight_end":1},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_fixed_bytes!","def_site_span":{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/macros.rs","byte_start":735,"byte_end":764,"line_start":22,"line_end":22,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! wrap_fixed_bytes {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/macros.rs","byte_start":2469,"byte_end":2553,"line_start":73,"line_end":73,"column_start":9,"column_end":93,"is_primary":true,"text":[{"text":"        $vis struct $name(#[into_iterator(owned, ref, ref_mut)] pub $crate::FixedBytes<$n>);","highlight_start":9,"highlight_end":93}],"label":"this is the found type `alloy_primitives::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/address.rs","byte_start":1090,"byte_end":2806,"line_start":45,"line_end":87,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"wrap_fixed_bytes!(","highlight_start":1,"highlight_end":1},{"text":"    // we implement Display with the checksum, so we don't derive it","highlight_start":1,"highlight_end":1},{"text":"    extra_derives: [],","highlight_start":1,"highlight_end":1},{"text":"    /// An Ethereum address, 20 bytes in length.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// This type is separate from [`B160`](crate::B160) / [`FixedBytes<20>`]","highlight_start":1,"highlight_end":1},{"text":"    /// and is declared with the [`wrap_fixed_bytes!`] macro. This allows us","highlight_start":1,"highlight_end":1},{"text":"    /// to implement address-specific functionality.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// The main difference with the generic [`FixedBytes`] implementation is that","highlight_start":1,"highlight_end":1},{"text":"    /// [`Display`] formats the address using its [EIP-55] checksum","highlight_start":1,"highlight_end":1},{"text":"    /// ([`to_checksum`]).","highlight_start":1,"highlight_end":1},{"text":"    /// Use [`Debug`] to display the raw bytes without the checksum.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// [EIP-55]: https://eips.ethereum.org/EIPS/eip-55","highlight_start":1,"highlight_end":1},{"text":"    /// [`Debug`]: fmt::Debug","highlight_start":1,"highlight_end":1},{"text":"    /// [`Display`]: fmt::Display","highlight_start":1,"highlight_end":1},{"text":"    /// [`to_checksum`]: Address::to_checksum","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// # Examples","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// Parsing and formatting:","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// ```","highlight_start":1,"highlight_end":1},{"text":"    /// use alloy_primitives::{address, Address};","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// let checksummed = \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\";","highlight_start":1,"highlight_end":1},{"text":"    /// let expected = address!(\"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":1},{"text":"    /// let address = Address::parse_checksummed(checksummed, None).expect(\"valid checksum\");","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(address, expected);","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// // Format the address with the checksum","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(address.to_string(), checksummed);","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(address.to_checksum(None), checksummed);","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// // Format the compressed checksummed address","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(format!(\"{address:#}\"), \"0xd8dA…6045\");","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// // Format the address without the checksum","highlight_start":1,"highlight_end":1},{"text":"    /// assert_eq!(format!(\"{address:?}\"), \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":1},{"text":"    /// ```","highlight_start":1,"highlight_end":1},{"text":"    pub struct Address<20>;","highlight_start":1,"highlight_end":1},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_fixed_bytes!","def_site_span":{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/macros.rs","byte_start":735,"byte_end":764,"line_start":22,"line_end":22,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! wrap_fixed_bytes {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/rpc.rs","byte_start":4,"byte_end":9,"line_start":1,"line_end":1,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"use alloy::hex;","highlight_start":5,"highlight_end":10}],"label":"one version of crate `alloy_primitives` used here, as a dependency of crate `alloy_core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/rpc.rs","byte_start":20323,"byte_end":20339,"line_start":667,"line_end":667,"column_start":9,"column_end":25,"is_primary":false,"text":[{"text":"    use alloy_primitives::address;","highlight_start":9,"highlight_end":25}],"label":"one version of crate `alloy_primitives` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the type constructed contains `alloy_primitives::Address` due to the type of the argument passed","code":null,"level":"help","spans":[{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/macros.rs","byte_start":29853,"byte_end":29895,"line_start":843,"line_end":843,"column_start":17,"column_end":59,"is_primary":false,"text":[{"text":"                $crate::$ty::new($crate::hex!($d ($d t)+))","highlight_start":17,"highlight_end":59}],"label":"this argument influences the type of `Some`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/rpc.rs","byte_start":20845,"byte_end":20897,"line_start":685,"line_end":685,"column_start":24,"column_end":76,"is_primary":false,"text":[{"text":"            from: Some(address!(\"8f54C8c2df62c94772ac14CcFc85603742976312\")),","highlight_start":24,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"address!","def_site_span":{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/macros.rs","byte_start":29713,"byte_end":29731,"line_start":837,"line_end":837,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        macro_rules! $name {","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/rpc.rs","byte_start":20840,"byte_end":20898,"line_start":685,"line_end":685,"column_start":19,"column_end":77,"is_primary":true,"text":[{"text":"            from: Some(address!(\"8f54C8c2df62c94772ac14CcFc85603742976312\")),","highlight_start":19,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"tuple variant defined here","code":null,"level":"note","spans":[{"file_name":"/Users/malik/.rustup/toolchains/nightly-2025-02-17-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs","byte_start":22726,"byte_end":22730,"line_start":580,"line_end":580,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"    Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),","highlight_start":5,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rpc.rs:685:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m685\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            from: Some(address!(\"8f54C8c2df62c94772ac14CcFc85603742976312\")),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `alloy::alloy_primitives::Address`, found `alloy_primitives::Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this enum variant are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: two different versions of crate `alloy_primitives` are being used; two types coming from two different versions of the same crate are different types even if they look the same\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/address.rs:45:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the expected type `alloy::alloy_primitives::Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/rpc.rs:1:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse alloy::hex;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `alloy_primitives` used here, as a dependency of crate `alloy_core`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m667\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    use alloy_primitives::address;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `alloy_primitives` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/address.rs:45:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mwrap_fixed_bytes!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // we implement Display with the checksum, so we don't derive it\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    extra_derives: [],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// An Ethereum address, 20 bytes in length.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct Address<20>;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the found type `alloy_primitives::Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `cargo tree` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the type constructed contains `alloy_primitives::Address` due to the type of the argument passed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rpc.rs:685:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m685\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            from: Some(address!(\"8f54C8c2df62c94772ac14CcFc85603742976312\")),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis argument influences the type of `Some`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: tuple variant defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malik/.rustup/toolchains/nightly-2025-02-17-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:580:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `wrap_fixed_bytes` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/rpc.rs","byte_start":20921,"byte_end":20973,"line_start":686,"line_end":686,"column_start":22,"column_end":74,"is_primary":true,"text":[{"text":"            to: Some(address!(\"44aa93095d6749a706051658b970b941c72c1d53\")),","highlight_start":22,"highlight_end":74}],"label":"expected `alloy::alloy_primitives::Address`, found `alloy_primitives::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/rpc.rs","byte_start":20916,"byte_end":20920,"line_start":686,"line_end":686,"column_start":17,"column_end":21,"is_primary":false,"text":[{"text":"            to: Some(address!(\"44aa93095d6749a706051658b970b941c72c1d53\")),","highlight_start":17,"highlight_end":21}],"label":"arguments to this enum variant are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"two different versions of crate `alloy_primitives` are being used; two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/macros.rs","byte_start":2469,"byte_end":2553,"line_start":73,"line_end":73,"column_start":9,"column_end":93,"is_primary":true,"text":[{"text":"        $vis struct $name(#[into_iterator(owned, ref, ref_mut)] pub $crate::FixedBytes<$n>);","highlight_start":9,"highlight_end":93}],"label":"this is the expected type `alloy::alloy_primitives::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/address.rs","byte_start":1090,"byte_end":2806,"line_start":45,"line_end":87,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"wrap_fixed_bytes!(","highlight_start":1,"highlight_end":19},{"text":"    // we implement Display with the checksum, so we don't derive it","highlight_start":1,"highlight_end":69},{"text":"    extra_derives: [],","highlight_start":1,"highlight_end":23},{"text":"    /// An Ethereum address, 20 bytes in length.","highlight_start":1,"highlight_end":49},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This type is separate from [`B160`](crate::B160) / [`FixedBytes<20>`]","highlight_start":1,"highlight_end":78},{"text":"    /// and is declared with the [`wrap_fixed_bytes!`] macro. This allows us","highlight_start":1,"highlight_end":77},{"text":"    /// to implement address-specific functionality.","highlight_start":1,"highlight_end":53},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// The main difference with the generic [`FixedBytes`] implementation is that","highlight_start":1,"highlight_end":83},{"text":"    /// [`Display`] formats the address using its [EIP-55] checksum","highlight_start":1,"highlight_end":68},{"text":"    /// ([`to_checksum`]).","highlight_start":1,"highlight_end":27},{"text":"    /// Use [`Debug`] to display the raw bytes without the checksum.","highlight_start":1,"highlight_end":69},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [EIP-55]: https://eips.ethereum.org/EIPS/eip-55","highlight_start":1,"highlight_end":56},{"text":"    /// [`Debug`]: fmt::Debug","highlight_start":1,"highlight_end":30},{"text":"    /// [`Display`]: fmt::Display","highlight_start":1,"highlight_end":34},{"text":"    /// [`to_checksum`]: Address::to_checksum","highlight_start":1,"highlight_end":46},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// # Examples","highlight_start":1,"highlight_end":19},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Parsing and formatting:","highlight_start":1,"highlight_end":32},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    /// use alloy_primitives::{address, Address};","highlight_start":1,"highlight_end":50},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// let checksummed = \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\";","highlight_start":1,"highlight_end":72},{"text":"    /// let expected = address!(\"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":79},{"text":"    /// let address = Address::parse_checksummed(checksummed, None).expect(\"valid checksum\");","highlight_start":1,"highlight_end":94},{"text":"    /// assert_eq!(address, expected);","highlight_start":1,"highlight_end":39},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // Format the address with the checksum","highlight_start":1,"highlight_end":48},{"text":"    /// assert_eq!(address.to_string(), checksummed);","highlight_start":1,"highlight_end":54},{"text":"    /// assert_eq!(address.to_checksum(None), checksummed);","highlight_start":1,"highlight_end":60},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // Format the compressed checksummed address","highlight_start":1,"highlight_end":53},{"text":"    /// assert_eq!(format!(\"{address:#}\"), \"0xd8dA…6045\");","highlight_start":1,"highlight_end":59},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // Format the address without the checksum","highlight_start":1,"highlight_end":51},{"text":"    /// assert_eq!(format!(\"{address:?}\"), \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":90},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    pub struct Address<20>;","highlight_start":1,"highlight_end":28},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_fixed_bytes!","def_site_span":{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/macros.rs","byte_start":735,"byte_end":764,"line_start":22,"line_end":22,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! wrap_fixed_bytes {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/macros.rs","byte_start":2469,"byte_end":2553,"line_start":73,"line_end":73,"column_start":9,"column_end":93,"is_primary":true,"text":[{"text":"        $vis struct $name(#[into_iterator(owned, ref, ref_mut)] pub $crate::FixedBytes<$n>);","highlight_start":9,"highlight_end":93}],"label":"this is the found type `alloy_primitives::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/address.rs","byte_start":1090,"byte_end":2806,"line_start":45,"line_end":87,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"wrap_fixed_bytes!(","highlight_start":1,"highlight_end":19},{"text":"    // we implement Display with the checksum, so we don't derive it","highlight_start":1,"highlight_end":69},{"text":"    extra_derives: [],","highlight_start":1,"highlight_end":23},{"text":"    /// An Ethereum address, 20 bytes in length.","highlight_start":1,"highlight_end":49},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This type is separate from [`B160`](crate::B160) / [`FixedBytes<20>`]","highlight_start":1,"highlight_end":78},{"text":"    /// and is declared with the [`wrap_fixed_bytes!`] macro. This allows us","highlight_start":1,"highlight_end":77},{"text":"    /// to implement address-specific functionality.","highlight_start":1,"highlight_end":53},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// The main difference with the generic [`FixedBytes`] implementation is that","highlight_start":1,"highlight_end":83},{"text":"    /// [`Display`] formats the address using its [EIP-55] checksum","highlight_start":1,"highlight_end":68},{"text":"    /// ([`to_checksum`]).","highlight_start":1,"highlight_end":27},{"text":"    /// Use [`Debug`] to display the raw bytes without the checksum.","highlight_start":1,"highlight_end":69},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [EIP-55]: https://eips.ethereum.org/EIPS/eip-55","highlight_start":1,"highlight_end":56},{"text":"    /// [`Debug`]: fmt::Debug","highlight_start":1,"highlight_end":30},{"text":"    /// [`Display`]: fmt::Display","highlight_start":1,"highlight_end":34},{"text":"    /// [`to_checksum`]: Address::to_checksum","highlight_start":1,"highlight_end":46},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// # Examples","highlight_start":1,"highlight_end":19},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Parsing and formatting:","highlight_start":1,"highlight_end":32},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    /// use alloy_primitives::{address, Address};","highlight_start":1,"highlight_end":50},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// let checksummed = \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\";","highlight_start":1,"highlight_end":72},{"text":"    /// let expected = address!(\"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":79},{"text":"    /// let address = Address::parse_checksummed(checksummed, None).expect(\"valid checksum\");","highlight_start":1,"highlight_end":94},{"text":"    /// assert_eq!(address, expected);","highlight_start":1,"highlight_end":39},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // Format the address with the checksum","highlight_start":1,"highlight_end":48},{"text":"    /// assert_eq!(address.to_string(), checksummed);","highlight_start":1,"highlight_end":54},{"text":"    /// assert_eq!(address.to_checksum(None), checksummed);","highlight_start":1,"highlight_end":60},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // Format the compressed checksummed address","highlight_start":1,"highlight_end":53},{"text":"    /// assert_eq!(format!(\"{address:#}\"), \"0xd8dA…6045\");","highlight_start":1,"highlight_end":59},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // Format the address without the checksum","highlight_start":1,"highlight_end":51},{"text":"    /// assert_eq!(format!(\"{address:?}\"), \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":90},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    pub struct Address<20>;","highlight_start":1,"highlight_end":28},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_fixed_bytes!","def_site_span":{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/macros.rs","byte_start":735,"byte_end":764,"line_start":22,"line_end":22,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! wrap_fixed_bytes {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/rpc.rs","byte_start":4,"byte_end":9,"line_start":1,"line_end":1,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"use alloy::hex;","highlight_start":5,"highlight_end":10}],"label":"one version of crate `alloy_primitives` used here, as a dependency of crate `alloy_core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/rpc.rs","byte_start":20323,"byte_end":20339,"line_start":667,"line_end":667,"column_start":9,"column_end":25,"is_primary":false,"text":[{"text":"    use alloy_primitives::address;","highlight_start":9,"highlight_end":25}],"label":"one version of crate `alloy_primitives` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the type constructed contains `alloy_primitives::Address` due to the type of the argument passed","code":null,"level":"help","spans":[{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/macros.rs","byte_start":29853,"byte_end":29895,"line_start":843,"line_end":843,"column_start":17,"column_end":59,"is_primary":false,"text":[{"text":"                $crate::$ty::new($crate::hex!($d ($d t)+))","highlight_start":17,"highlight_end":59}],"label":"this argument influences the type of `Some`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/rpc.rs","byte_start":20921,"byte_end":20973,"line_start":686,"line_end":686,"column_start":22,"column_end":74,"is_primary":false,"text":[{"text":"            to: Some(address!(\"44aa93095d6749a706051658b970b941c72c1d53\")),","highlight_start":22,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"address!","def_site_span":{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/macros.rs","byte_start":29713,"byte_end":29731,"line_start":837,"line_end":837,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        macro_rules! $name {","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/rpc.rs","byte_start":20916,"byte_end":20974,"line_start":686,"line_end":686,"column_start":17,"column_end":75,"is_primary":true,"text":[{"text":"            to: Some(address!(\"44aa93095d6749a706051658b970b941c72c1d53\")),","highlight_start":17,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"tuple variant defined here","code":null,"level":"note","spans":[{"file_name":"/Users/malik/.rustup/toolchains/nightly-2025-02-17-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs","byte_start":22726,"byte_end":22730,"line_start":580,"line_end":580,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"    Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),","highlight_start":5,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rpc.rs:686:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m686\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            to: Some(address!(\"44aa93095d6749a706051658b970b941c72c1d53\")),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `alloy::alloy_primitives::Address`, found `alloy_primitives::Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this enum variant are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: two different versions of crate `alloy_primitives` are being used; two types coming from two different versions of the same crate are different types even if they look the same\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/address.rs:45:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the expected type `alloy::alloy_primitives::Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/rpc.rs:1:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse alloy::hex;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `alloy_primitives` used here, as a dependency of crate `alloy_core`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m667\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    use alloy_primitives::address;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `alloy_primitives` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/address.rs:45:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mwrap_fixed_bytes!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // we implement Display with the checksum, so we don't derive it\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    extra_derives: [],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// An Ethereum address, 20 bytes in length.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct Address<20>;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the found type `alloy_primitives::Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `cargo tree` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the type constructed contains `alloy_primitives::Address` due to the type of the argument passed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rpc.rs:686:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m686\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            to: Some(address!(\"44aa93095d6749a706051658b970b941c72c1d53\")),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis argument influences the type of `Some`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: tuple variant defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malik/.rustup/toolchains/nightly-2025-02-17-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:580:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `wrap_fixed_bytes` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/parser/log_parser.rs","byte_start":5473,"byte_end":5487,"line_start":196,"line_end":196,"column_start":22,"column_end":36,"is_primary":true,"text":[{"text":"            address: self.address(),","highlight_start":22,"highlight_end":36}],"label":"expected `alloy::alloy_primitives::Address`, found `alloy_primitives::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"two different versions of crate `alloy_primitives` are being used; two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/macros.rs","byte_start":2469,"byte_end":2553,"line_start":73,"line_end":73,"column_start":9,"column_end":93,"is_primary":true,"text":[{"text":"        $vis struct $name(#[into_iterator(owned, ref, ref_mut)] pub $crate::FixedBytes<$n>);","highlight_start":9,"highlight_end":93}],"label":"this is the expected type `alloy::alloy_primitives::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/address.rs","byte_start":1090,"byte_end":2806,"line_start":45,"line_end":87,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"wrap_fixed_bytes!(","highlight_start":1,"highlight_end":19},{"text":"    // we implement Display with the checksum, so we don't derive it","highlight_start":1,"highlight_end":69},{"text":"    extra_derives: [],","highlight_start":1,"highlight_end":23},{"text":"    /// An Ethereum address, 20 bytes in length.","highlight_start":1,"highlight_end":49},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This type is separate from [`B160`](crate::B160) / [`FixedBytes<20>`]","highlight_start":1,"highlight_end":78},{"text":"    /// and is declared with the [`wrap_fixed_bytes!`] macro. This allows us","highlight_start":1,"highlight_end":77},{"text":"    /// to implement address-specific functionality.","highlight_start":1,"highlight_end":53},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// The main difference with the generic [`FixedBytes`] implementation is that","highlight_start":1,"highlight_end":83},{"text":"    /// [`Display`] formats the address using its [EIP-55] checksum","highlight_start":1,"highlight_end":68},{"text":"    /// ([`to_checksum`]).","highlight_start":1,"highlight_end":27},{"text":"    /// Use [`Debug`] to display the raw bytes without the checksum.","highlight_start":1,"highlight_end":69},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [EIP-55]: https://eips.ethereum.org/EIPS/eip-55","highlight_start":1,"highlight_end":56},{"text":"    /// [`Debug`]: fmt::Debug","highlight_start":1,"highlight_end":30},{"text":"    /// [`Display`]: fmt::Display","highlight_start":1,"highlight_end":34},{"text":"    /// [`to_checksum`]: Address::to_checksum","highlight_start":1,"highlight_end":46},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// # Examples","highlight_start":1,"highlight_end":19},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Parsing and formatting:","highlight_start":1,"highlight_end":32},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    /// use alloy_primitives::{address, Address};","highlight_start":1,"highlight_end":50},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// let checksummed = \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\";","highlight_start":1,"highlight_end":72},{"text":"    /// let expected = address!(\"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":79},{"text":"    /// let address = Address::parse_checksummed(checksummed, None).expect(\"valid checksum\");","highlight_start":1,"highlight_end":94},{"text":"    /// assert_eq!(address, expected);","highlight_start":1,"highlight_end":39},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // Format the address with the checksum","highlight_start":1,"highlight_end":48},{"text":"    /// assert_eq!(address.to_string(), checksummed);","highlight_start":1,"highlight_end":54},{"text":"    /// assert_eq!(address.to_checksum(None), checksummed);","highlight_start":1,"highlight_end":60},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // Format the compressed checksummed address","highlight_start":1,"highlight_end":53},{"text":"    /// assert_eq!(format!(\"{address:#}\"), \"0xd8dA…6045\");","highlight_start":1,"highlight_end":59},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // Format the address without the checksum","highlight_start":1,"highlight_end":51},{"text":"    /// assert_eq!(format!(\"{address:?}\"), \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":90},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    pub struct Address<20>;","highlight_start":1,"highlight_end":28},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_fixed_bytes!","def_site_span":{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/macros.rs","byte_start":735,"byte_end":764,"line_start":22,"line_end":22,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! wrap_fixed_bytes {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/macros.rs","byte_start":2469,"byte_end":2553,"line_start":73,"line_end":73,"column_start":9,"column_end":93,"is_primary":true,"text":[{"text":"        $vis struct $name(#[into_iterator(owned, ref, ref_mut)] pub $crate::FixedBytes<$n>);","highlight_start":9,"highlight_end":93}],"label":"this is the found type `alloy_primitives::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/address.rs","byte_start":1090,"byte_end":2806,"line_start":45,"line_end":87,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"wrap_fixed_bytes!(","highlight_start":1,"highlight_end":19},{"text":"    // we implement Display with the checksum, so we don't derive it","highlight_start":1,"highlight_end":69},{"text":"    extra_derives: [],","highlight_start":1,"highlight_end":23},{"text":"    /// An Ethereum address, 20 bytes in length.","highlight_start":1,"highlight_end":49},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This type is separate from [`B160`](crate::B160) / [`FixedBytes<20>`]","highlight_start":1,"highlight_end":78},{"text":"    /// and is declared with the [`wrap_fixed_bytes!`] macro. This allows us","highlight_start":1,"highlight_end":77},{"text":"    /// to implement address-specific functionality.","highlight_start":1,"highlight_end":53},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// The main difference with the generic [`FixedBytes`] implementation is that","highlight_start":1,"highlight_end":83},{"text":"    /// [`Display`] formats the address using its [EIP-55] checksum","highlight_start":1,"highlight_end":68},{"text":"    /// ([`to_checksum`]).","highlight_start":1,"highlight_end":27},{"text":"    /// Use [`Debug`] to display the raw bytes without the checksum.","highlight_start":1,"highlight_end":69},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [EIP-55]: https://eips.ethereum.org/EIPS/eip-55","highlight_start":1,"highlight_end":56},{"text":"    /// [`Debug`]: fmt::Debug","highlight_start":1,"highlight_end":30},{"text":"    /// [`Display`]: fmt::Display","highlight_start":1,"highlight_end":34},{"text":"    /// [`to_checksum`]: Address::to_checksum","highlight_start":1,"highlight_end":46},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// # Examples","highlight_start":1,"highlight_end":19},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Parsing and formatting:","highlight_start":1,"highlight_end":32},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    /// use alloy_primitives::{address, Address};","highlight_start":1,"highlight_end":50},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// let checksummed = \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\";","highlight_start":1,"highlight_end":72},{"text":"    /// let expected = address!(\"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":79},{"text":"    /// let address = Address::parse_checksummed(checksummed, None).expect(\"valid checksum\");","highlight_start":1,"highlight_end":94},{"text":"    /// assert_eq!(address, expected);","highlight_start":1,"highlight_end":39},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // Format the address with the checksum","highlight_start":1,"highlight_end":48},{"text":"    /// assert_eq!(address.to_string(), checksummed);","highlight_start":1,"highlight_end":54},{"text":"    /// assert_eq!(address.to_checksum(None), checksummed);","highlight_start":1,"highlight_end":60},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // Format the compressed checksummed address","highlight_start":1,"highlight_end":53},{"text":"    /// assert_eq!(format!(\"{address:#}\"), \"0xd8dA…6045\");","highlight_start":1,"highlight_end":59},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // Format the address without the checksum","highlight_start":1,"highlight_end":51},{"text":"    /// assert_eq!(format!(\"{address:?}\"), \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\");","highlight_start":1,"highlight_end":90},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    pub struct Address<20>;","highlight_start":1,"highlight_end":28},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"wrap_fixed_bytes!","def_site_span":{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/macros.rs","byte_start":735,"byte_end":764,"line_start":22,"line_end":22,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! wrap_fixed_bytes {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/rpc.rs","byte_start":4,"byte_end":9,"line_start":1,"line_end":1,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"use alloy::hex;","highlight_start":5,"highlight_end":10}],"label":"one version of crate `alloy_primitives` used here, as a dependency of crate `alloy_core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/rpc.rs","byte_start":20323,"byte_end":20339,"line_start":667,"line_end":667,"column_start":9,"column_end":25,"is_primary":false,"text":[{"text":"    use alloy_primitives::address;","highlight_start":9,"highlight_end":25}],"label":"one version of crate `alloy_primitives` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser/log_parser.rs:196:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m196\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            address: self.address(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `alloy::alloy_primitives::Address`, found `alloy_primitives::Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: two different versions of crate `alloy_primitives` are being used; two types coming from two different versions of the same crate are different types even if they look the same\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/address.rs:45:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the expected type `alloy::alloy_primitives::Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/rpc.rs:1:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0muse alloy::hex;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `alloy_primitives` used here, as a dependency of crate `alloy_core`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m667\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    use alloy_primitives::address;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `alloy_primitives` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/address.rs:45:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mwrap_fixed_bytes!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // we implement Display with the checksum, so we don't derive it\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    extra_derives: [],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// An Ethereum address, 20 bytes in length.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct Address<20>;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the found type `alloy_primitives::Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `cargo tree` to explore your dependency tree\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `wrap_fixed_bytes` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/parser/log_parser.rs","byte_start":5509,"byte_end":5531,"line_start":197,"line_end":197,"column_start":21,"column_end":43,"is_primary":true,"text":[{"text":"            topics: self.topics().to_vec(),","highlight_start":21,"highlight_end":43}],"label":"expected `alloy::alloy_primitives::FixedBytes<32>`, found `alloy_primitives::FixedBytes<32>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"two different versions of crate `alloy_primitives` are being used; two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/fixed.rs","byte_start":939,"byte_end":976,"line_start":33,"line_end":33,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"pub struct FixedBytes<const N: usize>(#[into_iterator(owned, ref, ref_mut)] pub [u8; N]);","highlight_start":1,"highlight_end":38}],"label":"this is the expected type `alloy::alloy_primitives::FixedBytes`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/fixed.rs","byte_start":1099,"byte_end":1136,"line_start":35,"line_end":35,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"pub struct FixedBytes<const N: usize>(#[into_iterator(owned, ref, ref_mut)] pub [u8; N]);","highlight_start":1,"highlight_end":38}],"label":"this is the found type `alloy_primitives::FixedBytes`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/rpc.rs","byte_start":4,"byte_end":9,"line_start":1,"line_end":1,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"use alloy::hex;","highlight_start":5,"highlight_end":10}],"label":"one version of crate `alloy_primitives` used here, as a dependency of crate `alloy_core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/rpc.rs","byte_start":20323,"byte_end":20339,"line_start":667,"line_end":667,"column_start":9,"column_end":25,"is_primary":false,"text":[{"text":"    use alloy_primitives::address;","highlight_start":9,"highlight_end":25}],"label":"one version of crate `alloy_primitives` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser/log_parser.rs:197:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            topics: self.topics().to_vec(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `alloy::alloy_primitives::FixedBytes<32>`, found `alloy_primitives::FixedBytes<32>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: two different versions of crate `alloy_primitives` are being used; two types coming from two different versions of the same crate are different types even if they look the same\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/fixed.rs:33:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct FixedBytes<const N: usize>(#[into_iterator(owned, ref, ref_mut)] pub [u8; N]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the expected type `alloy::alloy_primitives::FixedBytes`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/fixed.rs:35:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct FixedBytes<const N: usize>(#[into_iterator(owned, ref, ref_mut)] pub [u8; N]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the found type `alloy_primitives::FixedBytes`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/rpc.rs:1:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse alloy::hex;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `alloy_primitives` used here, as a dependency of crate `alloy_core`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m667\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use alloy_primitives::address;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `alloy_primitives` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `cargo tree` to explore your dependency tree\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/parser/log_parser.rs","byte_start":5668,"byte_end":5685,"line_start":200,"line_end":200,"column_start":30,"column_end":47,"is_primary":true,"text":[{"text":"            block_hash: Some(self.block_hash()),","highlight_start":30,"highlight_end":47}],"label":"expected `alloy::alloy_primitives::FixedBytes<32>`, found `alloy_primitives::FixedBytes<32>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/parser/log_parser.rs","byte_start":5663,"byte_end":5667,"line_start":200,"line_end":200,"column_start":25,"column_end":29,"is_primary":false,"text":[{"text":"            block_hash: Some(self.block_hash()),","highlight_start":25,"highlight_end":29}],"label":"arguments to this enum variant are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"two different versions of crate `alloy_primitives` are being used; two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/fixed.rs","byte_start":939,"byte_end":976,"line_start":33,"line_end":33,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"pub struct FixedBytes<const N: usize>(#[into_iterator(owned, ref, ref_mut)] pub [u8; N]);","highlight_start":1,"highlight_end":38}],"label":"this is the expected type `alloy::alloy_primitives::FixedBytes`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/fixed.rs","byte_start":1099,"byte_end":1136,"line_start":35,"line_end":35,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"pub struct FixedBytes<const N: usize>(#[into_iterator(owned, ref, ref_mut)] pub [u8; N]);","highlight_start":1,"highlight_end":38}],"label":"this is the found type `alloy_primitives::FixedBytes`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/rpc.rs","byte_start":4,"byte_end":9,"line_start":1,"line_end":1,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"use alloy::hex;","highlight_start":5,"highlight_end":10}],"label":"one version of crate `alloy_primitives` used here, as a dependency of crate `alloy_core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/rpc.rs","byte_start":20323,"byte_end":20339,"line_start":667,"line_end":667,"column_start":9,"column_end":25,"is_primary":false,"text":[{"text":"    use alloy_primitives::address;","highlight_start":9,"highlight_end":25}],"label":"one version of crate `alloy_primitives` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the type constructed contains `alloy_primitives::FixedBytes<32>` due to the type of the argument passed","code":null,"level":"help","spans":[{"file_name":"src/parser/log_parser.rs","byte_start":5668,"byte_end":5685,"line_start":200,"line_end":200,"column_start":30,"column_end":47,"is_primary":false,"text":[{"text":"            block_hash: Some(self.block_hash()),","highlight_start":30,"highlight_end":47}],"label":"this argument influences the type of `Some`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/parser/log_parser.rs","byte_start":5663,"byte_end":5686,"line_start":200,"line_end":200,"column_start":25,"column_end":48,"is_primary":true,"text":[{"text":"            block_hash: Some(self.block_hash()),","highlight_start":25,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"tuple variant defined here","code":null,"level":"note","spans":[{"file_name":"/Users/malik/.rustup/toolchains/nightly-2025-02-17-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs","byte_start":22726,"byte_end":22730,"line_start":580,"line_end":580,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"    Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),","highlight_start":5,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser/log_parser.rs:200:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            block_hash: Some(self.block_hash()),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `alloy::alloy_primitives::FixedBytes<32>`, found `alloy_primitives::FixedBytes<32>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this enum variant are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: two different versions of crate `alloy_primitives` are being used; two types coming from two different versions of the same crate are different types even if they look the same\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/fixed.rs:33:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct FixedBytes<const N: usize>(#[into_iterator(owned, ref, ref_mut)] pub [u8; N]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the expected type `alloy::alloy_primitives::FixedBytes`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/fixed.rs:35:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct FixedBytes<const N: usize>(#[into_iterator(owned, ref, ref_mut)] pub [u8; N]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the found type `alloy_primitives::FixedBytes`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/rpc.rs:1:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse alloy::hex;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `alloy_primitives` used here, as a dependency of crate `alloy_core`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m667\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use alloy_primitives::address;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `alloy_primitives` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `cargo tree` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the type constructed contains `alloy_primitives::FixedBytes<32>` due to the type of the argument passed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser/log_parser.rs:200:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            block_hash: Some(self.block_hash()),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis argument influences the type of `Some`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: tuple variant defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malik/.rustup/toolchains/nightly-2025-02-17-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:580:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/parser/log_parser.rs","byte_start":5723,"byte_end":5746,"line_start":201,"line_end":201,"column_start":36,"column_end":59,"is_primary":true,"text":[{"text":"            transaction_hash: Some(self.transaction_hash()),","highlight_start":36,"highlight_end":59}],"label":"expected `alloy::alloy_primitives::FixedBytes<32>`, found `alloy_primitives::FixedBytes<32>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/parser/log_parser.rs","byte_start":5718,"byte_end":5722,"line_start":201,"line_end":201,"column_start":31,"column_end":35,"is_primary":false,"text":[{"text":"            transaction_hash: Some(self.transaction_hash()),","highlight_start":31,"highlight_end":35}],"label":"arguments to this enum variant are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"two different versions of crate `alloy_primitives` are being used; two types coming from two different versions of the same crate are different types even if they look the same","code":null,"level":"note","spans":[{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/fixed.rs","byte_start":939,"byte_end":976,"line_start":33,"line_end":33,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"pub struct FixedBytes<const N: usize>(#[into_iterator(owned, ref, ref_mut)] pub [u8; N]);","highlight_start":1,"highlight_end":38}],"label":"this is the expected type `alloy::alloy_primitives::FixedBytes`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/fixed.rs","byte_start":1099,"byte_end":1136,"line_start":35,"line_end":35,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"pub struct FixedBytes<const N: usize>(#[into_iterator(owned, ref, ref_mut)] pub [u8; N]);","highlight_start":1,"highlight_end":38}],"label":"this is the found type `alloy_primitives::FixedBytes`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/rpc.rs","byte_start":4,"byte_end":9,"line_start":1,"line_end":1,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"use alloy::hex;","highlight_start":5,"highlight_end":10}],"label":"one version of crate `alloy_primitives` used here, as a dependency of crate `alloy_core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/rpc.rs","byte_start":20323,"byte_end":20339,"line_start":667,"line_end":667,"column_start":9,"column_end":25,"is_primary":false,"text":[{"text":"    use alloy_primitives::address;","highlight_start":9,"highlight_end":25}],"label":"one version of crate `alloy_primitives` used here, as a direct dependency of the current crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the type constructed contains `alloy_primitives::FixedBytes<32>` due to the type of the argument passed","code":null,"level":"help","spans":[{"file_name":"src/parser/log_parser.rs","byte_start":5723,"byte_end":5746,"line_start":201,"line_end":201,"column_start":36,"column_end":59,"is_primary":false,"text":[{"text":"            transaction_hash: Some(self.transaction_hash()),","highlight_start":36,"highlight_end":59}],"label":"this argument influences the type of `Some`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/parser/log_parser.rs","byte_start":5718,"byte_end":5747,"line_start":201,"line_end":201,"column_start":31,"column_end":60,"is_primary":true,"text":[{"text":"            transaction_hash: Some(self.transaction_hash()),","highlight_start":31,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"tuple variant defined here","code":null,"level":"note","spans":[{"file_name":"/Users/malik/.rustup/toolchains/nightly-2025-02-17-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs","byte_start":22726,"byte_end":22730,"line_start":580,"line_end":580,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"    Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),","highlight_start":5,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser/log_parser.rs:201:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            transaction_hash: Some(self.transaction_hash()),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `alloy::alloy_primitives::FixedBytes<32>`, found `alloy_primitives::FixedBytes<32>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this enum variant are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: two different versions of crate `alloy_primitives` are being used; two types coming from two different versions of the same crate are different types even if they look the same\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-0.8.25/src/bits/fixed.rs:33:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct FixedBytes<const N: usize>(#[into_iterator(owned, ref, ref_mut)] pub [u8; N]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the expected type `alloy::alloy_primitives::FixedBytes`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/malik/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.0.0/src/bits/fixed.rs:35:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct FixedBytes<const N: usize>(#[into_iterator(owned, ref, ref_mut)] pub [u8; N]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the found type `alloy_primitives::FixedBytes`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/rpc.rs:1:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse alloy::hex;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `alloy_primitives` used here, as a dependency of crate `alloy_core`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m667\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use alloy_primitives::address;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `alloy_primitives` used here, as a direct dependency of the current crate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `cargo tree` to explore your dependency tree\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the type constructed contains `alloy_primitives::FixedBytes<32>` due to the type of the argument passed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser/log_parser.rs:201:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            transaction_hash: Some(self.transaction_hash()),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis argument influences the type of `Some`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: tuple variant defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malik/.rustup/toolchains/nightly-2025-02-17-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:580:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of unresolved module or unlinked crate `serde_json`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/rpc.rs","byte_start":1517,"byte_end":1527,"line_start":59,"line_end":59,"column_start":17,"column_end":27,"is_primary":true,"text":[{"text":"    pub params: serde_json::Value,","highlight_start":17,"highlight_end":27}],"label":"use of unresolved module or unlinked crate `serde_json`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you wanted to use a crate named `serde_json`, use `cargo add serde_json` to add it to your `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of unresolved module or unlinked crate `serde_json`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rpc.rs:59:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub params: serde_json::Value,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of unresolved module or unlinked crate `serde_json`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you wanted to use a crate named `serde_json`, use `cargo add serde_json` to add it to your `Cargo.toml`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 23 previous errors; 2 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 23 previous errors; 2 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0308, E0432, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0308, E0432, E0433.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0308`.\u001b[0m\n"}
